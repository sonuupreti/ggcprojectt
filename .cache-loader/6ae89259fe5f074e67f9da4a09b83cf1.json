{"remainingRequest":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js??ref--10-2!E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js??ref--10-3!E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","dependencies":[{"path":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","mtime":1522917700448},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js","mtime":1519365772000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar JhiHealthService = /** @class */ (function () {\r\n    function JhiHealthService(http) {\r\n        this.http = http;\r\n        this.separator = '.';\r\n    }\r\n    JhiHealthService.prototype.checkHealth = function () {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/health');\r\n    };\r\n    JhiHealthService.prototype.transformHealthData = function (data) {\r\n        var response = [];\r\n        this.flattenHealthData(response, null, data.details);\r\n        return response;\r\n    };\r\n    JhiHealthService.prototype.getBaseName = function (name) {\r\n        if (name) {\r\n            var split = name.split('.');\r\n            return split[0];\r\n        }\r\n    };\r\n    JhiHealthService.prototype.getSubSystemName = function (name) {\r\n        if (name) {\r\n            var split = name.split('.');\r\n            split.splice(0, 1);\r\n            var remainder = split.join('.');\r\n            return remainder ? ' - ' + remainder : '';\r\n        }\r\n    };\r\n    /* private methods */\r\n    JhiHealthService.prototype.addHealthObject = function (result, isLeaf, healthObject, name) {\r\n        var healthData = {\r\n            name: name\r\n        };\r\n        var details = {};\r\n        var hasDetails = false;\r\n        for (var key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                var value = healthObject[key];\r\n                if (key === 'status' || key === 'error') {\r\n                    healthData[key] = value;\r\n                }\r\n                else {\r\n                    if (!this.isHealthObject(value)) {\r\n                        details[key] = value;\r\n                        hasDetails = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Add the details\r\n        if (hasDetails) {\r\n            healthData.details = details;\r\n        }\r\n        // Only add nodes if they provide additional information\r\n        if (isLeaf || hasDetails || healthData.error) {\r\n            result.push(healthData);\r\n        }\r\n        return healthData;\r\n    };\r\n    JhiHealthService.prototype.flattenHealthData = function (result, path, data) {\r\n        for (var key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                var value = data[key];\r\n                if (this.isHealthObject(value)) {\r\n                    if (this.hasSubSystem(value)) {\r\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\r\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\r\n                    }\r\n                    else {\r\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    JhiHealthService.prototype.getModuleName = function (path, name) {\r\n        var result;\r\n        if (path && name) {\r\n            result = path + this.separator + name;\r\n        }\r\n        else if (path) {\r\n            result = path;\r\n        }\r\n        else if (name) {\r\n            result = name;\r\n        }\r\n        else {\r\n            result = '';\r\n        }\r\n        return result;\r\n    };\r\n    JhiHealthService.prototype.hasSubSystem = function (healthObject) {\r\n        var result = false;\r\n        for (var key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                var value = healthObject[key];\r\n                if (value && value.status) {\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    JhiHealthService.prototype.isHealthObject = function (healthObject) {\r\n        var result = false;\r\n        for (var key in healthObject) {\r\n            if (healthObject.hasOwnProperty(key)) {\r\n                if (key === 'status') {\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    JhiHealthService = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\r\n    ], JhiHealthService);\r\n    return JhiHealthService;\r\n    var _a;\r\n}());\r\nexports.JhiHealthService = JhiHealthService;\r\n",{"version":3,"file":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\admin\\health\\health.service.ts","sourceRoot":"","sources":["E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\admin\\health\\health.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\n@Injectable()\nexport class JhiHealthService {\n  separator: string;\n\n  constructor(private http: HttpClient) {\n    this.separator = '.';\n  }\n\n  checkHealth(): Observable<any> {\n    return this.http.get(SERVER_API_URL + 'management/health');\n  }\n\n  transformHealthData(data): any {\n    const response = [];\n    this.flattenHealthData(response, null, data.details);\n    return response;\n  }\n\n  getBaseName(name): string {\n    if (name) {\n      const split = name.split('.');\n      return split[0];\n    }\n  }\n\n  getSubSystemName(name): string {\n    if (name) {\n      const split = name.split('.');\n      split.splice(0, 1);\n      const remainder = split.join('.');\n      return remainder ? ' - ' + remainder : '';\n    }\n  }\n\n  /* private methods */\n  private addHealthObject(result, isLeaf, healthObject, name): any {\n    const healthData: any = {\n      name\n    };\n\n    const details = {};\n    let hasDetails = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        const value = healthObject[key];\n        if (key === 'status' || key === 'error') {\n          healthData[key] = value;\n        } else {\n          if (!this.isHealthObject(value)) {\n            details[key] = value;\n            hasDetails = true;\n          }\n        }\n      }\n    }\n\n    // Add the details\n    if (hasDetails) {\n      healthData.details = details;\n    }\n\n    // Only add nodes if they provide additional information\n    if (isLeaf || hasDetails || healthData.error) {\n      result.push(healthData);\n    }\n    return healthData;\n  }\n\n  private flattenHealthData(result, path, data): any {\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        const value = data[key];\n        if (this.isHealthObject(value)) {\n          if (this.hasSubSystem(value)) {\n            this.addHealthObject(result, false, value, this.getModuleName(path, key));\n            this.flattenHealthData(result, this.getModuleName(path, key), value);\n          } else {\n            this.addHealthObject(result, true, value, this.getModuleName(path, key));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  private getModuleName(path, name): string {\n    let result;\n    if (path && name) {\n      result = path + this.separator + name;\n    } else if (path) {\n      result = path;\n    } else if (name) {\n      result = name;\n    } else {\n      result = '';\n    }\n    return result;\n  }\n\n  private hasSubSystem(healthObject): boolean {\n    let result = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        const value = healthObject[key];\n        if (value && value.status) {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n\n  private isHealthObject(healthObject): boolean {\n    let result = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        if (key === 'status') {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n}\n"]}]}