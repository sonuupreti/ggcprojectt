{"remainingRequest":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js??ref--10-2!E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js??ref--10-3!E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\principal.service.ts","dependencies":[{"path":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\principal.service.ts","mtime":1522917700865},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js","mtime":1519365772000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar Subject_1 = require(\"rxjs/Subject\");\r\nvar account_service_1 = require(\"./account.service\");\r\nvar Principal = /** @class */ (function () {\r\n    function Principal(account) {\r\n        this.account = account;\r\n        this.authenticated = false;\r\n        this.authenticationState = new Subject_1.Subject();\r\n    }\r\n    Principal.prototype.authenticate = function (identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    };\r\n    Principal.prototype.hasAnyAuthority = function (authorities) {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    };\r\n    Principal.prototype.hasAnyAuthorityDirect = function (authorities) {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Principal.prototype.hasAuthority = function (authority) {\r\n        if (!this.authenticated) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return this.identity().then(function (id) {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, function () {\r\n            return Promise.resolve(false);\r\n        });\r\n    };\r\n    Principal.prototype.identity = function (force) {\r\n        var _this = this;\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account\r\n            .get()\r\n            .toPromise()\r\n            .then(function (response) {\r\n            var account = response.body;\r\n            if (account) {\r\n                _this.userIdentity = account;\r\n                _this.authenticated = true;\r\n            }\r\n            else {\r\n                _this.userIdentity = null;\r\n                _this.authenticated = false;\r\n            }\r\n            _this.authenticationState.next(_this.userIdentity);\r\n            return _this.userIdentity;\r\n        })\r\n            .catch(function (err) {\r\n            _this.userIdentity = null;\r\n            _this.authenticated = false;\r\n            _this.authenticationState.next(_this.userIdentity);\r\n            return null;\r\n        });\r\n    };\r\n    Principal.prototype.isAuthenticated = function () {\r\n        return this.authenticated;\r\n    };\r\n    Principal.prototype.isIdentityResolved = function () {\r\n        return this.userIdentity !== undefined;\r\n    };\r\n    Principal.prototype.getAuthenticationState = function () {\r\n        return this.authenticationState.asObservable();\r\n    };\r\n    Principal.prototype.getImageUrl = function () {\r\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\r\n    };\r\n    Principal = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof account_service_1.AccountService !== \"undefined\" && account_service_1.AccountService) === \"function\" && _a || Object])\r\n    ], Principal);\r\n    return Principal;\r\n    var _a;\r\n}());\r\nexports.Principal = Principal;\r\n",{"version":3,"file":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\principal.service.ts","sourceRoot":"","sources":["E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\principal.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { AccountService } from './account.service';\n\n@Injectable()\nexport class Principal {\n  private userIdentity: any;\n  private authenticated = false;\n  private authenticationState = new Subject<any>();\n\n  constructor(private account: AccountService) {}\n\n  authenticate(identity) {\n    this.userIdentity = identity;\n    this.authenticated = identity !== null;\n    this.authenticationState.next(this.userIdentity);\n  }\n\n  hasAnyAuthority(authorities: string[]): Promise<boolean> {\n    return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\n  }\n\n  hasAnyAuthorityDirect(authorities: string[]): boolean {\n    if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\n      return false;\n    }\n\n    for (let i = 0; i < authorities.length; i++) {\n      if (this.userIdentity.authorities.includes(authorities[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  hasAuthority(authority: string): Promise<boolean> {\n    if (!this.authenticated) {\n      return Promise.resolve(false);\n    }\n\n    return this.identity().then(\n      id => {\n        return Promise.resolve(id.authorities && id.authorities.includes(authority));\n      },\n      () => {\n        return Promise.resolve(false);\n      }\n    );\n  }\n\n  identity(force?: boolean): Promise<any> {\n    if (force === true) {\n      this.userIdentity = undefined;\n    }\n\n    // check and see if we have retrieved the userIdentity data from the server.\n    // if we have, reuse it by immediately resolving\n    if (this.userIdentity) {\n      return Promise.resolve(this.userIdentity);\n    }\n\n    // retrieve the userIdentity data from the server, update the identity object, and then resolve.\n    return this.account\n      .get()\n      .toPromise()\n      .then(response => {\n        const account = response.body;\n        if (account) {\n          this.userIdentity = account;\n          this.authenticated = true;\n        } else {\n          this.userIdentity = null;\n          this.authenticated = false;\n        }\n        this.authenticationState.next(this.userIdentity);\n        return this.userIdentity;\n      })\n      .catch(err => {\n        this.userIdentity = null;\n        this.authenticated = false;\n        this.authenticationState.next(this.userIdentity);\n        return null;\n      });\n  }\n\n  isAuthenticated(): boolean {\n    return this.authenticated;\n  }\n\n  isIdentityResolved(): boolean {\n    return this.userIdentity !== undefined;\n  }\n\n  getAuthenticationState(): Observable<any> {\n    return this.authenticationState.asObservable();\n  }\n\n  getImageUrl(): string {\n    return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\n  }\n}\n"]}]}