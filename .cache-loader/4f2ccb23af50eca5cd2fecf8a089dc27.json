{"remainingRequest":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js??ref--10-2!E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js??ref--10-3!E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","dependencies":[{"path":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","mtime":1522917700907},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js","mtime":1519365772000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar router_1 = require(\"@angular/router\");\r\nvar _1 = require(\"../\");\r\nvar login_service_1 = require(\"../login/login.service\");\r\nvar state_storage_service_1 = require(\"./state-storage.service\");\r\nvar UserRouteAccessService = /** @class */ (function () {\r\n    function UserRouteAccessService(router, loginService, principal, stateStorageService) {\r\n        this.router = router;\r\n        this.loginService = loginService;\r\n        this.principal = principal;\r\n        this.stateStorageService = stateStorageService;\r\n    }\r\n    UserRouteAccessService.prototype.canActivate = function (route, state) {\r\n        var authorities = route.data['authorities'];\r\n        // We need to call the checkLogin / and so the principal.identity() function, to ensure,\r\n        // that the client has a principal too, if they already logged in by the server.\r\n        // This could happen on a page refresh.\r\n        return this.checkLogin(authorities, state.url);\r\n    };\r\n    UserRouteAccessService.prototype.checkLogin = function (authorities, url) {\r\n        var _this = this;\r\n        var principal = this.principal;\r\n        return Promise.resolve(principal.identity().then(function (account) {\r\n            if (!authorities || authorities.length === 0) {\r\n                return true;\r\n            }\r\n            if (account) {\r\n                return principal.hasAnyAuthority(authorities).then(function (response) {\r\n                    if (response) {\r\n                        return true;\r\n                    }\r\n                    if (core_1.isDevMode()) {\r\n                        console.error('User has not any of required authorities: ', authorities);\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            _this.stateStorageService.storeUrl(url);\r\n            _this.router.navigate(['accessdenied']).then(function () {\r\n                // only show the login dialog, if the user hasn't logged in yet\r\n                if (!account) {\r\n                    _this.loginService.login();\r\n                }\r\n            });\r\n            return false;\r\n        }));\r\n    };\r\n    UserRouteAccessService = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" && _a || Object, typeof (_b = typeof login_service_1.LoginService !== \"undefined\" && login_service_1.LoginService) === \"function\" && _b || Object, typeof (_c = typeof _1.Principal !== \"undefined\" && _1.Principal) === \"function\" && _c || Object, typeof (_d = typeof state_storage_service_1.StateStorageService !== \"undefined\" && state_storage_service_1.StateStorageService) === \"function\" && _d || Object])\r\n    ], UserRouteAccessService);\r\n    return UserRouteAccessService;\r\n    var _a, _b, _c, _d;\r\n}());\r\nexports.UserRouteAccessService = UserRouteAccessService;\r\n",{"version":3,"file":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","sourceRoot":"","sources":["E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts"],"names":[],"mappings":";;;AAAA,sCAAsD;AACtD,0CAAmG;AAEnG,wBAAgC;AAChC,wDAAsD;AACtD,iEAA8D;AAG9D;IACE,gCACU,MAAc,EACd,YAA0B,EAC1B,SAAoB,EACpB,mBAAwC;QAHxC,WAAM,GAAN,MAAM,CAAQ;QACd,iBAAY,GAAZ,YAAY,CAAc;QAC1B,cAAS,GAAT,SAAS,CAAW;QACpB,wBAAmB,GAAnB,mBAAmB,CAAqB;IAC/C,CAAC;IAEJ,4CAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACnE,IAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,wFAAwF;QACxF,gFAAgF;QAChF,uCAAuC;QACvC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAED,2CAAU,GAAV,UAAW,WAAqB,EAAE,GAAW;QAA7C,iBA8BC;QA7BC,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,MAAM,CAAC,OAAO,CAAC,OAAO,CACpB,SAAS,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;YAC/B,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;oBACzD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACb,MAAM,CAAC,IAAI,CAAC;oBACd,CAAC;oBACD,EAAE,CAAC,CAAC,gBAAS,EAAE,CAAC,CAAC,CAAC;wBAChB,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,WAAW,CAAC,CAAC;oBAC3E,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC,CAAC,CAAC;YACL,CAAC;YAED,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC1C,+DAA+D;gBAC/D,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACb,KAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;gBAC5B,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IA9CU,sBAAsB;QADlC,iBAAU,EAAE;qEAGO,eAAM,oBAAN,eAAM,sDACA,4BAAY,oBAAZ,4BAAY,sDACf,YAAS,oBAAT,YAAS,sDACC,2CAAmB,oBAAnB,2CAAmB;OALvC,sBAAsB,CA+ClC;IAAD,6BAAC;;CAAA,AA/CD,IA+CC;AA/CY,wDAAsB","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { Principal } from '../';\nimport { LoginService } from '../login/login.service';\nimport { StateStorageService } from './state-storage.service';\n\n@Injectable()\nexport class UserRouteAccessService implements CanActivate {\n  constructor(\n    private router: Router,\n    private loginService: LoginService,\n    private principal: Principal,\n    private stateStorageService: StateStorageService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\n    const authorities = route.data['authorities'];\n    // We need to call the checkLogin / and so the principal.identity() function, to ensure,\n    // that the client has a principal too, if they already logged in by the server.\n    // This could happen on a page refresh.\n    return this.checkLogin(authorities, state.url);\n  }\n\n  checkLogin(authorities: string[], url: string): Promise<boolean> {\n    const principal = this.principal;\n    return Promise.resolve(\n      principal.identity().then(account => {\n        if (!authorities || authorities.length === 0) {\n          return true;\n        }\n\n        if (account) {\n          return principal.hasAnyAuthority(authorities).then(response => {\n            if (response) {\n              return true;\n            }\n            if (isDevMode()) {\n              console.error('User has not any of required authorities: ', authorities);\n            }\n            return false;\n          });\n        }\n\n        this.stateStorageService.storeUrl(url);\n        this.router.navigate(['accessdenied']).then(() => {\n          // only show the login dialog, if the user hasn't logged in yet\n          if (!account) {\n            this.loginService.login();\n          }\n        });\n        return false;\n      })\n    );\n  }\n}\n"]}]}