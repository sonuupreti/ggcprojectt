{"remainingRequest":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js??ref--10-2!E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js??ref--10-3!E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","dependencies":[{"path":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","mtime":1522917700323},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js","mtime":1519365772000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar JhiConfigurationService = /** @class */ (function () {\r\n    function JhiConfigurationService(http) {\r\n        this.http = http;\r\n    }\r\n    JhiConfigurationService.prototype.get = function () {\r\n        var _this = this;\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/configprops', { observe: 'response' }).map(function (res) {\r\n            var properties = [];\r\n            var propertiesObject = _this.getConfigPropertiesObjects(res.body);\r\n            for (var key in propertiesObject) {\r\n                if (propertiesObject.hasOwnProperty(key)) {\r\n                    properties.push(propertiesObject[key]);\r\n                }\r\n            }\r\n            return properties.sort(function (propertyA, propertyB) {\r\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\r\n            });\r\n        });\r\n    };\r\n    JhiConfigurationService.prototype.getConfigPropertiesObjects = function (res) {\r\n        // This code is for Spring Boot 2\r\n        if (res['contexts'] !== undefined) {\r\n            for (var key in res['contexts']) {\r\n                // If the key is not bootstrap, it will be the ApplicationContext Id\r\n                // For default app, it is baseName\r\n                // For microservice, it is baseName-1\r\n                if (!key.startsWith('bootstrap')) {\r\n                    return res['contexts'][key]['beans'];\r\n                }\r\n            }\r\n        }\r\n        // by default, use the default ApplicationContext Id\r\n        return res['contexts']['itrack2']['beans'];\r\n    };\r\n    JhiConfigurationService.prototype.getEnv = function () {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/env', { observe: 'response' }).map(function (res) {\r\n            var properties = {};\r\n            var propertySources = res.body['propertySources'];\r\n            for (var _i = 0, propertySources_1 = propertySources; _i < propertySources_1.length; _i++) {\r\n                var propertyObject = propertySources_1[_i];\r\n                var name = propertyObject['name'];\r\n                var detailProperties = propertyObject['properties'];\r\n                var vals = [];\r\n                for (var keyDetail in detailProperties) {\r\n                    if (detailProperties.hasOwnProperty(keyDetail)) {\r\n                        vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\r\n                    }\r\n                }\r\n                properties[name] = vals;\r\n            }\r\n            return properties;\r\n        });\r\n    };\r\n    JhiConfigurationService = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\r\n    ], JhiConfigurationService);\r\n    return JhiConfigurationService;\r\n    var _a;\r\n}());\r\nexports.JhiConfigurationService = JhiConfigurationService;\r\n",{"version":3,"file":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","sourceRoot":"","sources":["E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\n@Injectable()\nexport class JhiConfigurationService {\n  constructor(private http: HttpClient) {}\n\n  get(): Observable<any> {\n    return this.http.get(SERVER_API_URL + 'management/configprops', { observe: 'response' }).map((res: HttpResponse<any>) => {\n      const properties: any[] = [];\n      const propertiesObject = this.getConfigPropertiesObjects(res.body);\n      for (const key in propertiesObject) {\n        if (propertiesObject.hasOwnProperty(key)) {\n          properties.push(propertiesObject[key]);\n        }\n      }\n\n      return properties.sort((propertyA, propertyB) => {\n        return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n      });\n    });\n  }\n\n  getConfigPropertiesObjects(res: Object) {\n    // This code is for Spring Boot 2\n    if (res['contexts'] !== undefined) {\n      for (const key in res['contexts']) {\n        // If the key is not bootstrap, it will be the ApplicationContext Id\n        // For default app, it is baseName\n        // For microservice, it is baseName-1\n        if (!key.startsWith('bootstrap')) {\n          return res['contexts'][key]['beans'];\n        }\n      }\n    }\n    // by default, use the default ApplicationContext Id\n    return res['contexts']['itrack2']['beans'];\n  }\n\n  getEnv(): Observable<any> {\n    return this.http.get(SERVER_API_URL + 'management/env', { observe: 'response' }).map((res: HttpResponse<any>) => {\n      const properties: any = {};\n      const propertySources = res.body['propertySources'];\n\n      for (const propertyObject of propertySources) {\n        const name = propertyObject['name'];\n        const detailProperties = propertyObject['properties'];\n        const vals: any[] = [];\n        for (const keyDetail in detailProperties) {\n          if (detailProperties.hasOwnProperty(keyDetail)) {\n            vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\n          }\n        }\n        properties[name] = vals;\n      }\n      return properties;\n    });\n  }\n}\n"]}]}