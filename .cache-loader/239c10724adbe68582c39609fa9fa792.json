{"remainingRequest":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js??ref--10-2!E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js??ref--10-3!E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts","dependencies":[{"path":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts","mtime":1522917700843},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js","mtime":1519365772000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar ngx_webstorage_1 = require(\"ngx-webstorage\");\r\nvar StateStorageService = /** @class */ (function () {\r\n    function StateStorageService($sessionStorage) {\r\n        this.$sessionStorage = $sessionStorage;\r\n    }\r\n    StateStorageService.prototype.getPreviousState = function () {\r\n        return this.$sessionStorage.retrieve('previousState');\r\n    };\r\n    StateStorageService.prototype.resetPreviousState = function () {\r\n        this.$sessionStorage.clear('previousState');\r\n    };\r\n    StateStorageService.prototype.storePreviousState = function (previousStateName, previousStateParams) {\r\n        var previousState = { name: previousStateName, params: previousStateParams };\r\n        this.$sessionStorage.store('previousState', previousState);\r\n    };\r\n    StateStorageService.prototype.getDestinationState = function () {\r\n        return this.$sessionStorage.retrieve('destinationState');\r\n    };\r\n    StateStorageService.prototype.storeUrl = function (url) {\r\n        this.$sessionStorage.store('previousUrl', url);\r\n    };\r\n    StateStorageService.prototype.getUrl = function () {\r\n        return this.$sessionStorage.retrieve('previousUrl');\r\n    };\r\n    StateStorageService.prototype.storeDestinationState = function (destinationState, destinationStateParams, fromState) {\r\n        var destinationInfo = {\r\n            destination: {\r\n                name: destinationState.name,\r\n                data: destinationState.data\r\n            },\r\n            params: destinationStateParams,\r\n            from: {\r\n                name: fromState.name\r\n            }\r\n        };\r\n        this.$sessionStorage.store('destinationState', destinationInfo);\r\n    };\r\n    StateStorageService = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" && _a || Object])\r\n    ], StateStorageService);\r\n    return StateStorageService;\r\n    var _a;\r\n}());\r\nexports.StateStorageService = StateStorageService;\r\n",{"version":3,"file":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts","sourceRoot":"","sources":["E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\auth\\state-storage.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,iDAAuD;AAGvD;IACE,6BAAoB,eAAsC;QAAtC,oBAAe,GAAf,eAAe,CAAuB;IAAG,CAAC;IAE9D,8CAAgB,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IACxD,CAAC;IAED,gDAAkB,GAAlB;QACE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAC9C,CAAC;IAED,gDAAkB,GAAlB,UAAmB,iBAAiB,EAAE,mBAAmB;QACvD,IAAM,aAAa,GAAG,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,mBAAmB,EAAE,CAAC;QAC/E,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;IAC7D,CAAC;IAED,iDAAmB,GAAnB;QACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;IAC3D,CAAC;IAED,sCAAQ,GAAR,UAAS,GAAW;QAClB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;IAED,oCAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACtD,CAAC;IAED,mDAAqB,GAArB,UAAsB,gBAAgB,EAAE,sBAAsB,EAAE,SAAS;QACvE,IAAM,eAAe,GAAG;YACtB,WAAW,EAAE;gBACX,IAAI,EAAE,gBAAgB,CAAC,IAAI;gBAC3B,IAAI,EAAE,gBAAgB,CAAC,IAAI;aAC5B;YACD,MAAM,EAAE,sBAAsB;YAC9B,IAAI,EAAE;gBACJ,IAAI,EAAE,SAAS,CAAC,IAAI;aACrB;SACF,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;IAClE,CAAC;IAxCU,mBAAmB;QAD/B,iBAAU,EAAE;qEAE0B,sCAAqB,oBAArB,sCAAqB;OAD/C,mBAAmB,CAyC/B;IAAD,0BAAC;;CAAA,AAzCD,IAyCC;AAzCY,kDAAmB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { SessionStorageService } from 'ngx-webstorage';\n\n@Injectable()\nexport class StateStorageService {\n  constructor(private $sessionStorage: SessionStorageService) {}\n\n  getPreviousState() {\n    return this.$sessionStorage.retrieve('previousState');\n  }\n\n  resetPreviousState() {\n    this.$sessionStorage.clear('previousState');\n  }\n\n  storePreviousState(previousStateName, previousStateParams) {\n    const previousState = { name: previousStateName, params: previousStateParams };\n    this.$sessionStorage.store('previousState', previousState);\n  }\n\n  getDestinationState() {\n    return this.$sessionStorage.retrieve('destinationState');\n  }\n\n  storeUrl(url: string) {\n    this.$sessionStorage.store('previousUrl', url);\n  }\n\n  getUrl() {\n    return this.$sessionStorage.retrieve('previousUrl');\n  }\n\n  storeDestinationState(destinationState, destinationStateParams, fromState) {\n    const destinationInfo = {\n      destination: {\n        name: destinationState.name,\n        data: destinationState.data\n      },\n      params: destinationStateParams,\n      from: {\n        name: fromState.name\n      }\n    };\n    this.$sessionStorage.store('destinationState', destinationInfo);\n  }\n}\n"]}]}