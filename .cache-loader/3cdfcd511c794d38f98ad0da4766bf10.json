{"remainingRequest":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js??ref--10-2!E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js??ref--10-3!E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\login\\login.service.ts","dependencies":[{"path":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\login\\login.service.ts","mtime":1522917700651},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\ts-loader\\index.js","mtime":1519365772000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar principal_service_1 = require(\"../auth/principal.service\");\r\nvar auth_session_service_1 = require(\"../auth/auth-session.service\");\r\nvar LoginService = /** @class */ (function () {\r\n    function LoginService(principal, authServerProvider) {\r\n        this.principal = principal;\r\n        this.authServerProvider = authServerProvider;\r\n    }\r\n    LoginService.prototype.login = function () {\r\n        var port = location.port ? ':' + location.port : '';\r\n        if (port === ':9000') {\r\n            port = ':8080';\r\n        }\r\n        location.href = '//' + location.hostname + port + '/login';\r\n    };\r\n    LoginService.prototype.logout = function () {\r\n        this.authServerProvider.logout().subscribe();\r\n        this.principal.authenticate(null);\r\n    };\r\n    LoginService = tslib_1.__decorate([\r\n        core_1.Injectable(),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof principal_service_1.Principal !== \"undefined\" && principal_service_1.Principal) === \"function\" && _a || Object, typeof (_b = typeof auth_session_service_1.AuthServerProvider !== \"undefined\" && auth_session_service_1.AuthServerProvider) === \"function\" && _b || Object])\r\n    ], LoginService);\r\n    return LoginService;\r\n    var _a, _b;\r\n}());\r\nexports.LoginService = LoginService;\r\n",{"version":3,"file":"E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\login\\login.service.ts","sourceRoot":"","sources":["E:\\workspace_gspann\\itrack\\node_modules\\angular-router-loader\\src\\index.js!E:\\workspace_gspann\\itrack\\node_modules\\tslint-loader\\index.js!E:\\workspace_gspann\\itrack\\src\\main\\webapp\\app\\core\\login\\login.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAE3C,+DAAsD;AACtD,qEAAkE;AAGlE;IACE,sBAAoB,SAAoB,EAAU,kBAAsC;QAApE,cAAS,GAAT,SAAS,CAAW;QAAU,uBAAkB,GAAlB,kBAAkB,CAAoB;IAAG,CAAC;IAE5F,4BAAK,GAAL;QACE,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACpD,EAAE,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;YACrB,IAAI,GAAG,OAAO,CAAC;QACjB,CAAC;QACD,QAAQ,CAAC,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,QAAQ,GAAG,IAAI,GAAG,QAAQ,CAAC;IAC7D,CAAC;IAED,6BAAM,GAAN;QACE,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,SAAS,EAAE,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAdU,YAAY;QADxB,iBAAU,EAAE;qEAEoB,6BAAS,oBAAT,6BAAS,sDAA8B,yCAAkB,oBAAlB,yCAAkB;OAD7E,YAAY,CAexB;IAAD,mBAAC;;CAAA,AAfD,IAeC;AAfY,oCAAY","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Principal } from '../auth/principal.service';\nimport { AuthServerProvider } from '../auth/auth-session.service';\n\n@Injectable()\nexport class LoginService {\n  constructor(private principal: Principal, private authServerProvider: AuthServerProvider) {}\n\n  login() {\n    let port = location.port ? ':' + location.port : '';\n    if (port === ':9000') {\n      port = ':8080';\n    }\n    location.href = '//' + location.hostname + port + '/login';\n  }\n\n  logout() {\n    this.authServerProvider.logout().subscribe();\n    this.principal.authenticate(null);\n  }\n}\n"]}]}